// This is your Prisma schema file
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ======================
// User Model
// ======================
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  role      Role     @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sales     Sale[]
  purchases Purchase[]
  expenses  Expense[]
  invoices  Invoice[]

  @@map("users")
}

// ======================
// Product Model
// ======================
model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  sku         String   @unique
  barcode     String?
  price       Float
  costPrice   Float?
  quantity    Int      @default(0)
  minQuantity Int      @default(5)
  categoryId  String
  supplierId  String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category      Category       @relation(fields: [categoryId], references: [id])
  supplier      Supplier?      @relation(fields: [supplierId], references: [id])
  saleItems     SaleItem[]
  purchaseItems PurchaseItem[]
  invoiceItems  InvoiceItem[]

  @@map("products")
}

// ======================
// Category Model
// ======================
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

// ======================
// Customer Model
// ======================
model Customer {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String?
  phone     String?
  address   String?
  city      String?
  state     String?
  zipCode   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sales    Sale[]
  invoices Invoice[]

  @@map("customers")
}

// ======================
// Supplier Model
// ======================
model Supplier {
  id            String   @id @default(cuid())
  name          String
  contactPerson String?
  email         String?
  phone         String?
  address       String?
  city          String?
  state         String?
  zipCode       String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  products  Product[]
  purchases Purchase[]

  @@map("suppliers")
}

// ======================
// Sale Model
// ======================
model Sale {
  id            String        @id @default(cuid())
  customerId    String?
  userId        String
  totalAmount   Float
  discount      Float         @default(0)
  taxAmount     Float         @default(0)
  finalAmount   Float
  paymentMethod PaymentMethod
  status        SaleStatus    @default(PENDING)
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  customer Customer?  @relation(fields: [customerId], references: [id])
  user     User       @relation(fields: [userId], references: [id])
  items    SaleItem[]
  invoice  Invoice?

  @@map("sales")
}

// ======================
// Sale Item Model
// ======================
model SaleItem {
  id         String @id @default(cuid())
  saleId     String
  productId  String
  quantity   Int
  unitPrice  Float
  discount   Float  @default(0)
  totalPrice Float

  // Relations
  sale    Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("sale_items")
}

// ======================
// Purchase Model
// ======================
model Purchase {
  id          String         @id @default(cuid())
  supplierId  String
  userId      String
  totalAmount Float
  discount    Float          @default(0)
  taxAmount   Float          @default(0)
  finalAmount Float
  status      PurchaseStatus @default(PENDING)
  notes       String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  supplier Supplier       @relation(fields: [supplierId], references: [id])
  user     User           @relation(fields: [userId], references: [id])
  items    PurchaseItem[]

  @@map("purchases")
}

// ======================
// Purchase Item Model
// ======================
model PurchaseItem {
  id         String @id @default(cuid())
  purchaseId String
  productId  String
  quantity   Int
  unitCost   Float
  totalCost  Float

  // Relations
  purchase Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  product  Product  @relation(fields: [productId], references: [id])

  @@map("purchase_items")
}

// ======================
// Expense Model
// ======================
model Expense {
  id          String   @id @default(cuid())
  userId      String
  category    String
  description String
  amount      Float
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("expenses")
}

// ======================
// Invoice Model
// ======================
model Invoice {
  id            String        @id @default(cuid())
  invoiceNumber String        @unique
  customerId    String
  userId        String
  saleId        String?       @unique
  subtotal      Float         @default(0)
  totalAmount   Float
  discount      Float         @default(0)
  taxAmount     Float         @default(0)
  finalAmount   Float
  status        InvoiceStatus @default(UNPAID)
  invoiceDate   DateTime      @default(now())
  dueDate       DateTime
  paidDate      DateTime?
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  customer Customer      @relation(fields: [customerId], references: [id])
  user     User          @relation(fields: [userId], references: [id])
  sale     Sale?         @relation(fields: [saleId], references: [id])
  items    InvoiceItem[]

  @@map("invoices")
}

// ======================
// Invoice Item Model
// ======================
model InvoiceItem {
  id          String  @id @default(cuid())
  invoiceId   String
  productId   String?
  description String
  quantity    Int
  unitPrice   Float
  discount    Float   @default(0)
  taxAmount   Float   @default(0)
  totalPrice  Float

  // Relations
  invoice Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id])

  @@map("invoice_items")
}

// ======================
// Enums
// ======================
enum Role {
  SUPER_ADMIN
  ADMIN
  MANAGER
  CASHIER
  USER
}

enum PaymentMethod {
  CASH
  CARD
  BANK_TRANSFER
  DIGITAL_WALLET
}

enum SaleStatus {
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum InvoiceStatus {
  UNPAID
  PARTIALLY_PAID
  PAID
  OVERDUE
  CANCELLED
}
